import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from './store';
import { fetchСonvertСurrency, fetchCurrentRate, ErrorResponse, CurrentRates, ConvertedСurrency } from './api';


export interface State {
  value: number;
  status: 'idle' | 'loading' | 'failed';
  currentRates: CurrentRates | ErrorResponse | null;
  convertCurrency: ConvertedСurrency | ErrorResponse | null;
}

const initialState: State = {
  value: 0,
  status: 'idle',
  currentRates: null,
  convertCurrency: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getCurrentRates = createAsyncThunk(
  'app/fetchCurrentRate',
  async (baseCurrency, { rejectWithValue }) => {
    try {
      const response = await fetchCurrentRate(baseCurrency);
      return response.data;
    
    } catch (error: any) {
      console.log('getCurrentRates error = ', error);

      const { code, message: info = error } = error.response?.data.error;
      return rejectWithValue({
        success: false,
        error: {
          code,
          info,
        },
      } as ErrorResponse);
    }
  }
);

export const convertCurrency = createAsyncThunk(
  'app/fetchСonvertСurrency',
  async ({ amount, from, to }: any, { rejectWithValue }) => {
    try {
      const response = await fetchСonvertСurrency(amount, from, to);
      return response.data;
    
    } catch (error: any) {
      const { code, message: info = error } = error.response?.data.error;

      return rejectWithValue({
        success: false,
        error: {
          code,
          info,
        },
      } as ErrorResponse);
    }
  }
);

export const appSlice = createSlice({
  name: 'app',
  initialState,

  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCurrentRates.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getCurrentRates.rejected, (state, action) => {
        state.status = 'failed';
        state.currentRates = action.payload as ErrorResponse;
      })
      .addCase(getCurrentRates.fulfilled, (state, action) => {
        state.status = action.payload.success ? 'idle' : 'failed';
        state.currentRates = action.payload;
      })

      .addCase(convertCurrency.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(convertCurrency.rejected, (state, action) => {
        state.status = 'failed';
        state.convertCurrency = action.payload as ErrorResponse;
      })
      .addCase(convertCurrency.fulfilled, (state, action) => {
        state.status = action.payload.success ? 'idle' : 'failed';
        state.convertCurrency = action.payload;
      });
  },
});

// export const { increment, decrement, incrementByAmount } = appSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.app.value)`
export const selectCurrentRates = (state: RootState): CurrentRates | ErrorResponse | null => state.app.currentRates;
export const selectConvertedCurrency = (state: RootState): ConvertedСurrency | ErrorResponse | null => state.app.convertCurrency;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCurrentRates(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default appSlice.reducer;
